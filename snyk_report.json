{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "PT",
                  "Security",
                  "SourceHttpParam",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/how-to-firebase/fogo/commit/a3d5054fa9e7da0201e2709d847102a00a525067?diff=split#diff-ef1bae33e98527602bd4e6bfe2fe6c04747d71e6655a5c718f7100b844c9bb6eL158",
                    "lines": [
                      {
                        "line": "  return `/tmp/${path.parse(filename).base}`;",
                        "lineNumber": 157,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  return `/tmp/${Date.now()}`;",
                        "lineNumber": 157,
                        "lineChange": "added"
                      },
                      {
                        "line": "}",
                        "lineNumber": 158,
                        "lineChange": "none"
                      },
                      {
                        "line": "function convertLocalFile(localFilename, versionName) {",
                        "lineNumber": 160,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const cmd = getCmd(localFilename, versionName);",
                        "lineNumber": 161,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return execPromise(cmd);",
                        "lineNumber": 162,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 163,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getCmd(localFilename, versionName) {",
                        "lineNumber": 165,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return `convert ${localFilename} -resize ${versionName}\\\\> ${localFilename}`;",
                        "lineNumber": 166,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 167,
                        "lineChange": "none"
                      },
                      {
                        "line": "function execPromise(cmd) {",
                        "lineNumber": 169,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return new Promise((resolve, reject) =>",
                        "lineNumber": 170,
                        "lineChange": "none"
                      },
                      {
                        "line": "    exec(cmd, (error, stdout) => (error ? reject(error) : resolve(stdout)))",
                        "lineNumber": 171,
                        "lineChange": "none"
                      },
                      {
                        "line": "  );",
                        "lineNumber": 172,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 173,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getDestination(filename, versionName) {",
                        "lineNumber": 175,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const filenameParts = filename.split('/');",
                        "lineNumber": 176,
                        "lineChange": "none"
                      },
                      {
                        "line": "  filenameParts[filenameParts.length - 2] = versionName;",
                        "lineNumber": 177,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return filenameParts.join('/');",
                        "lineNumber": 178,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 179,
                        "lineChange": "none"
                      },
                      {
                        "line": "function getFile(admin, filename) {",
                        "lineNumber": 181,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return admin",
                        "lineNumber": 182,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .storage()",
                        "lineNumber": 183,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .bucket()",
                        "lineNumber": 184,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .file(filename);",
                        "lineNumber": 185,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 186,
                        "lineChange": "none"
                      },
                      {
                        "line": "function unlinkPromise(localFilename) {",
                        "lineNumber": 188,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return new Promise(",
                        "lineNumber": 189,
                        "lineChange": "none"
                      },
                      {
                        "line": "    (resolve, reject) => fs.unlink(localFilename, err => err && reject(err)) || resolve()",
                        "lineNumber": 190,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/zhoukekestar/modules/commit/b6c2fc78dc8679080b982124a24771f1466b2fb2?diff=split#diff-7347edae6e14bc50ee18f048e29145ce21cf3bb679d0391605c283ec246942bcL20",
                    "lines": [
                      {
                        "line": "res.sendFile(dir + '/' + req.params.id);",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "// Test ok on winodws. Not sure that linux will be work ok.",
                        "lineNumber": 20,
                        "lineChange": "added"
                      },
                      {
                        "line": "res.sendFile((dir + '/' + req.params.id).replace(/\\//g, '\\\\\\\\'));",
                        "lineNumber": 21,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/NodeBB/NodeBB/commit/cacc732015c64bba55a6ab45510086febccfb1b2?diff=split#diff-300f765b568b38163933bfcd40c75fe91709a35e9a7522bca2f8c5fe4b19195aL102",
                    "lines": [
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, req.files.userPhoto.name, req.files.userPhoto.path, res);",
                        "lineNumber": 101,
                        "lineChange": "removed"
                      },
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);",
                        "lineNumber": 101,
                        "lineChange": "added"
                      },
                      {
                        "line": "\t\t\treturn;",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t}",
                        "lineNumber": 103,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tvar absolutePath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), path.basename(oldpicture));",
                        "lineNumber": 105,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t",
                        "lineNumber": 106,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tfs.unlink(absolutePath, function(err) {",
                        "lineNumber": 107,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tif(err) {\t\t\t\t",
                        "lineNumber": 108,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t\tconsole.error('[%d] %s', Date.now(), + err);",
                        "lineNumber": 109,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t}",
                        "lineNumber": 110,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t",
                        "lineNumber": 111,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\tuploadUserPicture(req.user.uid, path.extname(req.files.userPhoto.name), req.files.userPhoto.path, res);",
                        "lineNumber": 112,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\t",
                        "lineNumber": 113,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t});",
                        "lineNumber": 114,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t});",
                        "lineNumber": 115,
                        "lineChange": "none"
                      },
                      {
                        "line": "});",
                        "lineNumber": 116,
                        "lineChange": "none"
                      },
                      {
                        "line": "function uploadUserPicture(uid, extension, tempPath, res) {",
                        "lineNumber": 118,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tif(!extension) {",
                        "lineNumber": 119,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\tres.send({",
                        "lineNumber": 120,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t\terror: 'Error uploading file! Error : Invalid extension!'",
                        "lineNumber": 121,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\t});",
                        "lineNumber": 122,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t\treturn;",
                        "lineNumber": 123,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t}",
                        "lineNumber": 124,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar filename = uid + '-profileimg' + extension;",
                        "lineNumber": 126,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar uploadPath = path.join(global.configuration['ROOT_DIRECTORY'], global.nconf.get('upload_path'), filename);",
                        "lineNumber": 127,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 128,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t// @todo move to proper logging code - this should only be temporary",
                        "lineNumber": 129,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tconsole.log('Info: Attempting upload to: '+ uploadPath);",
                        "lineNumber": 130,
                        "lineChange": "none"
                      },
                      {
                        "line": "\t",
                        "lineNumber": 131,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar is = fs.createReadStream(tempPath);",
                        "lineNumber": 132,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tvar os = fs.createWriteStream(uploadPath);",
                        "lineNumber": 133,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 760,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/PT",
              "name": "PT",
              "shortDescription": {
                "text": "Path Traversal"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "PT",
                  "Security",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/pacolang/paco/commit/d05f41cb0aa3167b86bd3b1063d07d7e64bec86f?diff=split#diff-7ddfb3e035b42cd70649cc33393fe32cR26",
                    "lines": [
                      {
                        "line": "// Commands",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "switch os.Args[1] {",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "case \"build\":",
                        "lineNumber": 26,
                        "lineChange": "added"
                      },
                      {
                        "line": "  err := buildCommand.Parse(os.Args[2:])",
                        "lineNumber": 27,
                        "lineChange": "added"
                      },
                      {
                        "line": "// Read the given file",
                        "lineNumber": 44,
                        "lineChange": "none"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(os.Args[1])",
                        "lineNumber": 17,
                        "lineChange": "removed"
                      },
                      {
                        "line": "bytes, err := ioutil.ReadFile(file)",
                        "lineNumber": 45,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "  log.Errorf(err)",
                        "lineNumber": 47,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/trinchan/slackbot/commit/c8350a18049c609ef7b6847666d07e69aca9fb46?diff=split#diff-f2f667c6f0bb538d9d35241bd93421fcL18",
                    "lines": [
                      {
                        "line": "func init() {",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "  flag.Parse()",
                        "lineNumber": 16,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var configFile = flag.String(\"c\", \"config.json\", \"Config file (default ./config.json)\")",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(configFile)",
                        "lineNumber": 18,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  config, err := ioutil.ReadFile(*configFile)",
                        "lineNumber": 18,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "    log.Println(\"open config: \", err)",
                        "lineNumber": 20,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/ketchuphq/ketchup/commit/31630fa4703d23c6055439536fd661d3c47da038?diff=split#diff-d72b60c856c1aa9b8e14c2c3c4b221abL59",
                    "lines": [
                      {
                        "line": "Run: func(ctx *service.CommandContext) {",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "  ctx.RequireExactlyNArgs(1)",
                        "lineNumber": 57,
                        "lineChange": "none"
                      },
                      {
                        "line": "  f, err := os.Open(ctx.Args[0])",
                        "lineNumber": 58,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 59,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    panic(err)",
                        "lineNumber": 60,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  err := m.importFromJSON(ctx.Args[0])",
                        "lineNumber": 42,
                        "lineChange": "added"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 68,
                        "lineChange": "none"
                      },
                      {
                        "line": "\tpanic(err)",
                        "lineNumber": 69,
                        "lineChange": "none"
                      },
                      {
                        "line": "func (m *Module) importFromJSON(path string) error {",
                        "lineNumber": 78,
                        "lineChange": "added"
                      },
                      {
                        "line": "  f, err := os.Open(path)",
                        "lineNumber": 79,
                        "lineChange": "added"
                      },
                      {
                        "line": "  if err != nil {",
                        "lineNumber": 80,
                        "lineChange": "added"
                      },
                      {
                        "line": "    return err",
                        "lineNumber": 81,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 527,
                "cwe": [
                  "CWE-23"
                ]
              }
            },
            {
              "id": "go/XSS",
              "name": "XSS",
              "shortDescription": {
                "text": "Cross-site Scripting (XSS)"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser's Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they've been correctly escaped in the application code and in this way the attempted attack is diverted.\n\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware.\n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user's browser.|\n|**DOM-based**|Client|The attacker forces the user's browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code:\n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches.\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents.\n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "go",
                  "XSS",
                  "Security",
                  "SourceHttpHeader",
                  "Taint"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/shaoshing/train/commit/10f251358766222f4211540c014fd74c6a32cf83?diff=split#diff-8b80bab7c379f59fe83cb4ee2d015ea7L9",
                    "lines": [
                      {
                        "line": ")",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "func Handler(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "  content := ReadAsset(r.URL.Path)",
                        "lineNumber": 10,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, content)",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  reader := strings.NewReader(content)",
                        "lineNumber": 11,
                        "lineChange": "added"
                      },
                      {
                        "line": "  io.Copy(w, reader)",
                        "lineNumber": 12,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 13,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 14,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/alphagov/router/commit/1c0f502e99bafc95900f6d0c42dfb6c364430a7c?diff=split#diff-a2c8aae7faef01e89d82efda1da4f769L12",
                    "lines": [
                      {
                        "line": "func makeDebugServer(name string) http.HandlerFunc {",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "  var randSrc = &randomDataMaker{src: rand.NewSource(time.Now().UTC().UnixNano())}",
                        "lineNumber": 29,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return func(w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "    randSrc.Lock()",
                        "lineNumber": 32,
                        "lineChange": "added"
                      },
                      {
                        "line": "    defer randSrc.Unlock()",
                        "lineNumber": 33,
                        "lineChange": "added"
                      },
                      {
                        "line": "w.Header().Set(\"Content-Type\", \"text/plain\")",
                        "lineNumber": 35,
                        "lineChange": "added"
                      },
                      {
                        "line": "fmt.Fprintln(w, name, \":\", r.URL.Path)",
                        "lineNumber": 37,
                        "lineChange": "none"
                      },
                      {
                        "line": "fmt.Fprintln(w)",
                        "lineNumber": 38,
                        "lineChange": "added"
                      },
                      {
                        "line": "  }",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 44,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/aristanetworks/openconfigbeat/commit/d9f4424d7d6d442a95dc9860bf704745a4ce5cae?diff=split#diff-13c7e3ca9b985b0c964b3150b184b678L30",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "func dbJoin(ctx interface{}, w http.ResponseWriter, r *http.Request) {",
                        "lineNumber": 33,
                        "lineChange": "none"
                      },
                      {
                        "line": "  r.ParseForm()",
                        "lineNumber": 34,
                        "lineChange": "none"
                      },
                      {
                        "line": "  diagnose.DebugHTTPForm(r)",
                        "lineNumber": 35,
                        "lineChange": "none"
                      },
                      {
                        "line": "err := nDB.Join(strings.Split(r.Form[\"members\"][0], \",\"))",
                        "lineNumber": 51,
                        "lineChange": "none"
                      },
                      {
                        "line": "if err != nil {",
                        "lineNumber": 52,
                        "lineChange": "none"
                      },
                      {
                        "line": "  fmt.Fprintf(w, \"%s error in the DB join %s\\n\", r.URL.Path, err)",
                        "lineNumber": 41,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  rsp := diagnose.FailCommand(fmt.Errorf(\"%s error in the DB join %s\", r.URL.Path, err))",
                        "lineNumber": 53,
                        "lineChange": "added"
                      },
                      {
                        "line": "  log.WithError(err).Error(\"join cluster failed\")",
                        "lineNumber": 54,
                        "lineChange": "added"
                      },
                      {
                        "line": "  diagnose.HTTPReply(w, rsp, json)",
                        "lineNumber": 55,
                        "lineChange": "added"
                      },
                      {
                        "line": "  return",
                        "lineNumber": 56,
                        "lineChange": "none"
                      },
                      {
                        "line": "}",
                        "lineNumber": 57,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 288,
                "cwe": [
                  "CWE-79"
                ]
              }
            },
            {
              "id": "javascript/NoRateLimitingForExpensiveWebOperation",
              "name": "NoRateLimitingForExpensiveWebOperation",
              "shortDescription": {
                "text": "Allocation of Resources Without Limits or Throttling"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWithout unlimited resources, software operating in the real world is inherently limited in the resources it may consume; similarly, servers are limited by the number of simultaneous sessions they can handle. Therefore, it is important for developers to design software that considers these real-world physical (or virtual) limitations and limits user sessions accordingly, both in terms of the number of user sessions and in the quantity of resources each user may demand. Software with this weakness does not include such limitations and as a result, individual user sessions may consume too many resources, leading to unintended software behavior including, potentially, denial of service. This can be compared to a single restaurant customer emptying out the entire buffet, leaving no food for other customers--or an entire busload mobbing the buffet all at once, with a similar effect. This may happen inadvertently or as a result of an attack by a malicious user.\n\n### Best practices for prevention\n* Test extensively to obtain baseline values indicating how the software performs in the real world under various conditions (normal and peak); use these values to determine reasonable software limits.\n* Set clear limits for all flexible parameters such as maximum allocable memory, number of processes within a given timeframe, file descriptors, requests per client, number of records per request, etc. This is particularly true for any parameters within user control.\n* Release all resources when no longer in use, including incorporating timeouts for inactive users, processes, and resources.\n* Familiarize Dev, Ops, and IT teams with best practices for recognizing and preventing DoS attacks and out-of-control resource allocation to prevent catastrophic failures.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript",
                  "NoRateLimitingForExpensiveWebOperation",
                  "Security"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/comatory/fb2iCal/commit/6a1ef614ade7ba821009dbce4a615d448751a449?diff=split#diff-92bbac9a308cd5fcf9db165841f2d90ce981baddcb2b1e26cfff170929af3bd1R5",
                    "lines": [
                      {
                        "line": "const rateLimit = require('express-rate-limit')",
                        "lineNumber": 4,
                        "lineChange": "added"
                      },
                      {
                        "line": "const crawl = require('./crawler')",
                        "lineNumber": 6,
                        "lineChange": "none"
                      },
                      {
                        "line": "const parseHTML = require('./parser')",
                        "lineNumber": 7,
                        "lineChange": "none"
                      },
                      {
                        "line": "const generateICS = require('./ics')",
                        "lineNumber": 8,
                        "lineChange": "none"
                      },
                      {
                        "line": "const { genericErrorHandler, checkFBURL } = require('./middlewares')",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "const port = process.env.PORT",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "const app = express()",
                        "lineNumber": 12,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('view engine', 'ejs')",
                        "lineNumber": 14,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.set('views', path.join(__dirname, 'views'))",
                        "lineNumber": 15,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(express.static(path.join(__dirname, 'public')))",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')))",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use(bodyParser())",
                        "lineNumber": 19,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.get('/', (req, res) => {",
                        "lineNumber": 21,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.render('index')",
                        "lineNumber": 22,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.get('/error', (req, res) => {",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "  const error = req.error || req.query.error || ''",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res",
                        "lineNumber": 28,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .status(500)",
                        "lineNumber": 29,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .render('error', { error })",
                        "lineNumber": 30,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 31,
                        "lineChange": "none"
                      },
                      {
                        "line": "// NOTE: Capture all unkown URLs",
                        "lineNumber": 38,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.get('*', (req, res) => {",
                        "lineNumber": 39,
                        "lineChange": "none"
                      },
                      {
                        "line": "  res.status(400).render('404')",
                        "lineNumber": 40,
                        "lineChange": "none"
                      },
                      {
                        "line": "})",
                        "lineNumber": 41,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use('/download', checkFBURL)",
                        "lineNumber": 43,
                        "lineChange": "none"
                      },
                      {
                        "line": "app.use('/download', rateLimit())",
                        "lineNumber": 39,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 1164,
                "cwe": [
                  "CWE-770"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/PT",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP parameter flows into sendFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[an HTTP parameter](0)",
              "[flows](1),(2),(3),(4),(5)",
              "[sendFile](6)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "startColumn": 9,
                  "endColumn": 17
                }
              }
            }
          ],
          "fingerprints": {
            "0": "f14fed043a98caed1c9af8ed9c27f00405d0af9feafddec6cb555bfbc1fd1585",
            "1": "5fde5b88.4773f344.d9fd6cba.d7919eeb.b263280c.8020cfdf.1ecfbc4a.242e913b.29386b0b.277c621c.d9fd6cba.2a1685a0.5ef953d3.5fce695c.1ecfbc4a.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 26,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 22,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 6,
                            "endLine": 6,
                            "startColumn": 11,
                            "endColumn": 19
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 51,
                            "endColumn": 59
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 18,
                            "endColumn": 27
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 825,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/PT",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4)",
              "[os.ReadFile](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 13,
                  "endLine": 13,
                  "startColumn": 19,
                  "endColumn": 30
                }
              }
            }
          ],
          "fingerprints": {
            "0": "df48b343f520f205d63b0511f858122d207860c0561f4d6b7fa9c3f628ca2c2f",
            "1": "8c6d5d4e.b6afcc5d.45df3e14.47a9547c.c32477a4.67ab4541.860c51ff.1bff12d3.94090e2e.73eb5804.fd4eeae2.e22980a8.556f02b4.67ab4541.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 31,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 825,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "go/XSS",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Unsanitized input from an HTTP header flows into fmt.Fprintf, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used to render an HTML page returned to the user. This may result in a Reflected Cross-Site Scripting attack (XSS).",
            "arguments": [
              "[an HTTP header](0)",
              "[flows](1),(2),(3),(4),(5),(6),(7),(8)",
              "[fmt.Fprintf](9)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.go",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "endLine": 20,
                  "startColumn": 3,
                  "endColumn": 14
                }
              }
            }
          ],
          "fingerprints": {
            "0": "67397ff6a4998c325af085144785e4eca595ba1f9077c3ea2bac7294334b1c81",
            "1": "ba4e4356.43be7f94.45df3e14.e22980a8.7ed83494.57f89f2f.cf894c96.1bff12d3.94090e2e.277c621c.fd4eeae2.e22980a8.5ef953d3.57f89f2f.a145879e.1bff12d3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 15,
                            "endColumn": 32
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11,
                            "endLine": 11,
                            "startColumn": 3,
                            "endColumn": 11
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 43,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 31,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 19,
                            "endColumn": 30
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 6,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 13,
                            "endLine": 13,
                            "startColumn": 3,
                            "endColumn": 10
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 7,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 8,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 9,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "main.go",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 20,
                            "endLine": 20,
                            "startColumn": 3,
                            "endColumn": 14
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 825,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/NoRateLimitingForExpensiveWebOperation",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "This endpoint handler performs a file system operation and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "markdown": "This {0} performs {1} and does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.",
            "arguments": [
              "[endpoint handler](0)",
              "[a file system operation](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5,
                  "endLine": 8,
                  "startColumn": 14,
                  "endColumn": 2
                }
              }
            }
          ],
          "fingerprints": {
            "0": "ccb7a55a2aa2b6506bea5fc0a764b8c25910702086049f6a2feff0fc6319e1db",
            "1": "ae77ea27.4773f344.8b18f948.c559ebce.fd1fa73f.5fce695c.83265159.89d75565.87ba341e.4773f344.d9fd6cba.c559ebce.fd1fa73f.5fce695c.1ecfbc4a.89d75565"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 5,
                            "endLine": 8,
                            "startColumn": 14,
                            "endColumn": 2
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 7,
                            "endLine": 7,
                            "startColumn": 9,
                            "endColumn": 17
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 675,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              },
              {
                "label": true,
                "type": "commonlyFixed"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "isSupported": true,
            "lang": "HTML",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "XML",
            "files": 3,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "Go",
            "files": 1,
            "type": "SUPPORTED"
          },
          {
            "isSupported": true,
            "lang": "JavaScript",
            "files": 1,
            "type": "SUPPORTED"
          }
        ]
      }
    }
  ]
}
